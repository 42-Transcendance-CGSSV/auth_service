openapi: 3.1.0
info:
  title: Auth Routes
  description: Auth Routes for the project fr_transcendence
  version: 1.0.0
servers:
  - url: 'https://172.17.0.1:25565/'
    description: Localhost server

tags:
  - name: Auth
    description: Everything about Auth
  - name: Token
    description: Token management operations
  - name: Account
    description: Account management operations

paths:
  /register:
    post:
      tags:
        - Auth
      description: "Register a user with the local provider"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocalUserRegister'
      responses:
        "200":
          description: "User registered successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        "400":
          description: "Invalid input"
        "500":
          description: "Server error"

  /login:
    post:
      tags:
        - Auth
      description: "Login a user with the local provider"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocalUserLogin'
      responses:
        "200":
          description: "User logged in successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        "401":
          description: "Invalid credentials"
        "500":
          description: "Server error"

  /logout:
    post:
      tags:
        - Auth
      description: "Logout the current user"
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: "User logged out successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        "401":
          description: "Unauthorized"
        "500":
          description: "Server error"

  /token/refresh:
    post:
      tags:
        - Token
      description: "Refresh the access token"
      responses:
        "200":
          description: "Token refreshed successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponse'
        "400":
          description: "Missing refresh token"
        "401":
          description: "Invalid or expired refresh token"
        "500":
          description: "Server error"
  /token/decode:
    get:
      tags:
        - Token
      description: "Decode the token and retrieve user information"
      responses:
        "200":
          description: "Token decoded successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        "401":
          description: "Invalid token"
        "500":
          description: "Server error"
  /token/validate:
    get:
      tags:
        - Token
      description: "Validate the token"
      responses:
        "200":
          description: "Token is valid"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        "401":
          description: "Invalid token"
        "500":
          description: "Server error"
  /api/account/activate-account:
    post:
      tags:
        - Account
      description: "Activate a user account"
      responses:
        "200":
          description: "Account activated successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        "500":
          description: "Server error"

  /api/account/upload-picture:
    post:
      tags:
        - Account
      description: "Upload a profile picture"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: "Picture uploaded successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        "400":
          description: "Invalid file"
        "500":
          description: "Server error"

  /api/account/get-picture/{userId}:
    get:
      tags:
        - Account
      description: "Get the profile picture path of a user"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "Profile picture path retrieved successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        "400":
          description: "Invalid user ID"
        "500":
          description: "Server error"

components:
  schemas:
    LocalUserRegister:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - name
        - email
        - password

    LocalUserLogin:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - email
        - password

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string

    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            user_data:
              type: object
              properties:
                id:
                  type: string
                name:
                  type: string
                email:
                  type: string
                  format: email
                auth_provider:
                  type: string
                created_at:
                  type: string
                  format: date-time
                updated_at:
                  type: string
                  format: date-time
            token:
              type: string
        message:
          type: string

    RefreshTokenResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            token:
              type: string
        message:
          type: string