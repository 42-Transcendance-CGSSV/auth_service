openapi: 3.1.0
info:
  title: Auth Routes
  description: Auth Routes for the project fr_transcendence
  version: 1.0.0
servers:
  - url: 'https://172.17.0.1:25565/'
    description: Localhost server

tags:
  - name: Auth
    description: Everything about Auth
  - name: Token
    description: Token management operations

paths:
  /api/auth/register:
    post:
      tags:
        - Auth
      description: "Register a user with the local provider"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocalUserRegister'
      responses:
        "200":
          description: "User registered successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        "400":
          description: "Invalid input"
        "500":
          description: "Server error"

  /api/auth/login:
    post:
      tags:
        - Auth
      description: "Login a user with the local provider"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocalUserLogin'
      responses:
        "200":
          description: "User logged in successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        "401":
          description: "Invalid credentials"
        "500":
          description: "Server error"

  /api/auth/logout:
    post:
      tags:
        - Auth
      description: "Logout the current user"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "User logged out successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        "401":
          description: "Unauthorized"
        "500":
          description: "Server error"

  /api/auth/refresh-token:
    post:
      tags:
        - Auth
      description: "Refresh the access token"
      responses:
        "200":
          description: "Token refreshed successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponse'
        "401":
          description: "Invalid refresh token"
        "500":
          description: "Server error"

  /api/auth/activate-account:
    post:
      tags:
        - Auth
      description: "Activate user account"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivateAccount'
      responses:
        "200":
          description: "Account activated successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        "400":
          description: "Invalid activation token"
        "500":
          description: "Server error"

  /api/token/decode:
    get:
      tags:
        - Token
      description: "Decode and validate JWT token"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "Token decoded successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenDecodeResponse'
        "401":
          description: "Invalid token"
        "500":
          description: "Server error"

  /api/token/validate:
    get:
      tags:
        - Token
      description: "Validate JWT token"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "Token is valid"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        "401":
          description: "Invalid token"
        "500":
          description: "Server error"

components:
  schemas:
    LocalUserRegister:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          minLength: 4
          pattern: "^[A-Za-z]+$"
          example: "vSKAH"
        email:
          type: string
          format: email
          example: "jbadaire@student.42lyon.fr"
        password:
          type: string
          minLength: 8
          format: password
          example: "Password123!"

    LocalUserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "jbadaire@student.42lyon.fr"
        password:
          type: string
          minLength: 8
          format: password
          example: "Password123!"

    ActivateAccount:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation successful"

    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            user_data:
              $ref: '#/components/schemas/User'
            token:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        message:
          type: string
          example: "User logged"

    RefreshTokenResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            token:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        message:
          type: string
          example: "Refresh Token updated !"

    TokenDecodeResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/User'
        message:
          type: string
          example: "Ce token est valide, les informations contenues dedans ont été décodées !"

    User:
      type: object
      properties:
        id:
          type: string
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          example: "vSKAH"
        email:
          type: string
          format: email
          example: "jbadaire@student.42lyon.fr"
        auth_provider:
          type: string
          enum: [ local, google ]
          example: "local"
        created_at:
          type: string
          format: date-time
          example: "2024-03-20T10:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-03-20T10:00:00Z"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
